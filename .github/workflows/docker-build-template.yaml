name: Create and publish a Docker image

on:
  workflow_call:
    inputs:
      grist_version:
        description: Grist git ref to override the one configure in the dockerfile
        type: string
      build_env:
        description: Env to build custom image for (ANCT or DINUM)
        type: string
      target:
        description: Docker stage to target for the build
        type: string
      docker_tag:
        description: Docker tag to create during this action
        required: true
        type: string
      push:
        description: Wether to push the resulting docker image tags or not
        type: boolean
        default: true

# Defines custom environment variables for the workflow
env:
  REGISTRY: ghcr.io/gristgouv
  IMAGE_NAME: grist

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest

    steps:
      -
        name: Checkout repository
        uses: actions/checkout@v4
      -
        name: Validate docker tag against Grist version
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: ./.github/scripts/validate-tag-against-grist-version.py ${{ inputs.docker_tag }} dockerfiles/grist/Dockerfile
      -
        name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: type=raw,value=${{ inputs.docker_tag }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: dockerfiles/grist
          push: ${{ inputs.push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          target: ${{ inputs.target }}
          build-args: |
            ${{ inputs.grist_version != null && format('GRIST_VERSION={0}', inputs.grist_version) || null }}
            ${{ inputs.build_env != null && format('BUILD_ENV={0}', inputs.build_env) || null }}
          # use cache from current branch, as it's most likely the closest, but also main branch for the first branch build
          cache-from: |
            ${{ inputs.push && format('type=registry,ref={0}/{1}:cache-{2},mode=max', env.REGISTRY, env.IMAGE_NAME, github.ref_name) || null }}
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache-main
          cache-to: ${{ inputs.push && format('type=registry,ref={0}/{1}:cache-{2},mode=max', env.REGISTRY, env.IMAGE_NAME, github.ref_name) || null }}
      -
        name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        if: ${{ inputs.push }}
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
